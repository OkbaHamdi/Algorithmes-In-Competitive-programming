template <typename T, class F = function<T(const T&, const T&)>>
class SegmentTree {
    T NEUTRAL;
    int n;
    vector<T> tree;
    F func;
public:
    //with vector
    SegmentTree(const vector<T> &values, T neutral, const F& f) : func(f) {
        NEUTRAL = neutral;
        n = values.size();
        tree.resize(n*2);
        // Build
        for (int i=0; i < n; i++) {
            tree[n+i] = values[i];
        }
        for (int i = n - 1; i > 0; --i) {
            tree[i] = func(tree[i*2], tree[i*2+1]);
        }
    }
    // without vector
    SegmentTree(int sz,T value,T neutral, const F& f) : func(f) {
        NEUTRAL = neutral;
        n = sz;
        tree.resize(n*2);
        // Build
        for (int i=0; i < n; i++) {
            tree[n+i] = value;
        }
        for (int i = n - 1; i > 0; --i) {
            tree[i] = func(tree[i*2], tree[i*2+1]);
        }
    }

    void update(int index, T value) {
        tree[index+n] = value;
        index = index + n;
        for (int i = index; i > 1; i >>= 1){
            tree[i/2] = func(tree[i], tree[i^1]);
        }
    }

    T query(int l, int r) {
        T ans = NEUTRAL;
        for (l += n, r += n+1; l < r; l >>= 1, r >>= 1) {
            if (l&1) {
                ans = func(ans, tree[l++]);
            }
            if (r&1) {
                ans = func(ans, tree[--r]);
            }
        }
        return ans;
    }
};
/*
  the tree is 0-indexed
  query the range [l, r], l and r are inclusive
  usage:
  with vector
  auto func = [&](ll a, ll b) -> ll { return a+b;};
  SegmentTree<ll> st(v,0,func);
  or:
  without vector
  auto func = [&](ll a, ll b) -> ll { return a+b;};
  SegmentTree<ll> st(n,val,0,func);
*/
